cmake_minimum_required(VERSION 3.12.4)

set(COPYRIGHT "Cadabra Systems LLC")
project(
	queen
	VERSION 0.23.7.0
	DESCRIPTION "Cadabra Application Frontend Platform"
	HOMEPAGE_URL "https://cap.cadabra.systems"
	LANGUAGES CXX
)

if (NOT C_COMPILER)
	message(FATAL_ERROR "clang not found")
elseif (NOT CXX_COMPILER)
	message(FATAL_ERROR "clang++ not found")
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	message(FATAL_ERROR "MS Windows, seriously? No way!")
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	# list(APPEND CMAKE_PREFIX_PATH "/Application/Qt/5.15")
	#... -DCMAKE_PREFIX_PATH="$(brew --prefix qt@5);...
endif()

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

# QtCreator supports the following variables for Android, which are identical to qmake Android variables.
# Check http://doc.qt.io/qt-5/deployment-android.html for more information.
# They need to be set before the find_package(Qt5 ...) call.

#if(ANDROID)
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
#    if (ANDROID_ABI STREQUAL "armeabi-v7a")
#        set(ANDROID_EXTRA_LIBS
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libcrypto.so
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libssl.so)
#    endif()
#endif()

find_package(Qt5 COMPONENTS Core REQUIRED)
find_package(Qt5 COMPONENTS Qml REQUIRED)
find_package(Qt5 COMPONENTS Quick REQUIRED)
find_package(Qt5 COMPONENTS QuickControls2 REQUIRED)
find_package(Qt5 COMPONENTS Concurrent REQUIRED)
find_package(Qt5 COMPONENTS Webview REQUIRED)
find_package(Qt5 COMPONENTS Websockets REQUIRED)
find_package(Qt5 COMPONENTS Sensors REQUIRED)
find_package(Qt5 COMPONENTS Positioning REQUIRED)
find_package(Qt5 COMPONENTS Multimedia REQUIRED)
find_package(Qt5 COMPONENTS Sql REQUIRED)
find_package(Qt5 COMPONENTS Svg REQUIRED)
find_package(Qt5 COMPONENTS Xml REQUIRED)

#set(CADABRA_QUEEN_PLATFORMS iOS macOS iPadOS AndroidGMS AndroidHMS MSWindows Linux)
#set_property(CACHE CADABRA_QUEEN_PLATFORM PROPERTY STRINGS ${trafficLightColors})

option(CADABRA_QUEEN_LADYBUG "Stress Test Application" OFF)
if (CADABRA_QUEEN_LADYBUG)
	list(APPEND CADABRA_QUEEN_SKELETON "Ladybug")
endif ()

option(CADABRA_QUEEN_VANILLA "Cadabra Super's Application" OFF)
if (CADABRA_QUEEN_VANILLA)
	list(APPEND CADABRA_QUEEN_SKELETON "Vanilla")
endif ()

option(CADABRA_QUEEN_REGINA "DrOblozhko Supervisor's Application" OFF)
if (CADABRA_QUEEN_REGINA)
	list(APPEND CADABRA_QUEEN_SKELETON "Regina")
endif ()

option(CADABRA_QUEEN_EUREKA "SmartCare Patient's Application" OFF)
if (CADABRA_QUEEN_EUREKA)
	list(APPEND CADABRA_QUEEN_SKELETON "Eureka")
endif ()

option(CADABRA_QUEEN_AFRODITA "DrOblozhko Patient's Application" OFF)
if (CADABRA_QUEEN_EUREKA)
	list(APPEND CADABRA_QUEEN_SKELETON "Afrodita")
endif ()

add_compile_definitions($<$<CONFIG:DEBUG>:CADABRA_QUEEN_DEBUG_MODE>)
add_compile_definitions($<$<CONFIG:DEBUG>:DEBUG=1>)
add_compile_definitions($<$<CONFIG:DEBUG>:NDEBUG>)

add_compile_options(-Wall)
add_compile_options(-Wno-unused-parameter)
add_compile_options(-Wno-unused-private-field)
add_compile_options($<$<CONFIG:DEBUG>:-g3>)
add_compile_options($<$<CONFIG:DEBUG>:-Og>)
add_compile_options($<$<CONFIG:RELEASE>:-O3>)

include(Qaos/CMakeLists.txt)
include(Core/CMakeLists.txt)
include(Stress/CMakeLists.txt)
include(Repository/CMakeLists.txt)
include(Conversation/CMakeLists.txt)
include(ERP/CMakeLists.txt)
include(FA/CMakeLists.txt)
include(SD/CMakeLists.txt)
include(EC/CMakeLists.txt)
include(HR/CMakeLists.txt)
include(WMS/CMakeLists.txt)
include(Mentalgami/CMakeLists.txt)
include(DrOblozhko/CMakeLists.txt)

function(add_queen SKELETON_NAME SRC)
	string(TOLOWER ${SKELETON_NAME} BINARY_NAME)
	list(PREPEND ARGN "${SKELETON_NAME}.hpp" "${SKELETON_NAME}.cpp")
	if (ANDROID)
#-DCMAKE_BUILD_TYPE=Release
#-DANDROID_TARGET_SDK_VERSION=28
#-DANDROID_TARGET=True
#-DANDROID_SDK=/Users/glauco/Library/Android/sdk
#-DANDROID_BUILD_TOOLS_REVISION=31.0.0
#-DANDROID_NDK=/Users/glauco/Library/Android/sdk/ndk/22.1.7171670
#-DANDROID_ABIS='arm64-v8a;armeabi-v7a;x86;x86_64'
#-DKS_URL=/Users/glauco/Programming/AndroidKeystore/android.keystore
#-DKS_KEY_ALIAS=AndroidDeveloperKeystore
#-DKS_PASS_FILE=/Users/glauco/Programming/AndroidKeystore/keystore.pass
#-DQT_SDK_DIR=/Users/glauco/Programming/Qt/SDK/5.15.2
#-DCMAKE_TOOLCHAIN_FILE=CMake/Cute.toolchain.cmake
		add_library(${BINARY_NAME} SHARED ${ARGN})
	elseif (IOS)
#-DCMAKE_BUILD_TYPE=Release
#-DAPPLE_IOS_TARGET=True
#-DAPPLE_IOS_SIMULATOR=True
#-DMIN_IOS_SDK_TARGET=12
#-DQT_SDK_DIR=/Users/glauco/Programming/Qt/SDK/5.15.2/ios
#-DCMAKE_TOOLCHAIN_FILE=CMake/Cute.toolchain.cmake
		add_executable(${BINARY_NAME} ${ARGN})
	else ()
		message(FATAL_ERROR "Unknown target platform")
	endif ()

	target_compile_definitions(${BINARY_NAME PRIVATE $<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:QT_QML_DEBUG>)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Core)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Qml)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Quick)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::QuickControls2)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Concurrent)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Webview)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Websockets)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Sensors)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Positioning)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Multimedia)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Sql)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Svg)
	target_link_libraries(${BINARY_NAME PRIVATE Qt5::Xml)
endfunction()

if ("Ladybug" IN_LIST CADABRA_QUEEN_SKELETON)
	add_queen(
				"Ladybug"
				${CADABRA_PLATFORM_QUEEN_CPP} ${CADABRA_PLATFORM_QUEEN_HPP} ${CADABRA_PLATFORM_QUEEN_QRC}
				${CADABRA_QAOS_CPP} ${CADABRA_QAOS_HPP} ${CADABRA_QAOS_QRC}
				${CADABRA_PLATFORM_QUEEN_CORE_CPP} ${CADABRA_PLATFORM_QUEEN_CORE_HPP} ${CADABRA_PLATFORM_QUEEN_CORE_QRC}
				${CADABRA_PLATFORM_QUEEN_REPOSITORY_CPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_HPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_QRC}
				${CADABRA_PLATFORM_QUEEN_CONVERSATION_CPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_HPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_QRC}
				${CADABRA_PLATFORM_QUEEN_ERP_HPP} ${CADABRA_PLATFORM_QUEEN_ERP_CPP} ${CADABRA_PLATFORM_QUEEN_ERP_QRC}
				${CADABRA_PLATFORM_QUEEN_FA_HPP} ${CADABRA_PLATFORM_QUEEN_FA_CPP} ${CADABRA_PLATFORM_QUEEN_FA_QRC}
				${CADABRA_PLATFORM_QUEEN_EC_HPP} ${CADABRA_PLATFORM_QUEEN_EC_CPP} ${CADABRA_PLATFORM_QUEEN_EC_QRC}
				${CADABRA_PLATFORM_QUEEN_SD_CPP} ${CADABRA_PLATFORM_QUEEN_SD_HPP} ${CADABRA_PLATFORM_QUEEN_SD_QRC}
				${CADABRA_PLATFORM_QUEEN_HR_CPP} ${CADABRA_PLATFORM_QUEEN_HR_HPP} ${CADABRA_PLATFORM_QUEEN_HR_QRC}
				${CADABRA_PLATFORM_QUEEN_WMS_CPP} ${CADABRA_PLATFORM_QUEEN_WMS_HPP} ${CADABRA_PLATFORM_QUEEN_WMS_QRC}
				${CADABRA_PLATFORM_QUEEN_MENTALGAMI_CPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_HPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_QRC}
				${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_CPP} ${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_HPP} ${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_QRC}
				${CADABRA_PLATFORM_QUEEN_STRESS_CPP} ${CADABRA_PLATFORM_QUEEN_STRESS_HPP} ${CADABRA_PLATFORM_QUEEN_STRESS_QRC}
	)
endif ()

if ("Vanilla" IN_LIST CADABRA_QUEEN_SKELETON)
	add_queen(
				"Vanilla"
				${CADABRA_PLATFORM_QUEEN_CPP} ${CADABRA_PLATFORM_QUEEN_HPP} ${CADABRA_PLATFORM_QUEEN_QRC}
				${CADABRA_QAOS_CPP} ${CADABRA_QAOS_HPP} ${CADABRA_QAOS_QRC}
				${CADABRA_PLATFORM_QUEEN_CORE_CPP} ${CADABRA_PLATFORM_QUEEN_CORE_HPP} ${CADABRA_PLATFORM_QUEEN_CORE_QRC}
				${CADABRA_PLATFORM_QUEEN_REPOSITORY_CPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_HPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_QRC}
				${CADABRA_PLATFORM_QUEEN_CONVERSATION_CPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_HPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_QRC}
				${CADABRA_PLATFORM_QUEEN_ERP_HPP} ${CADABRA_PLATFORM_QUEEN_ERP_CPP} ${CADABRA_PLATFORM_QUEEN_ERP_QRC}
				${CADABRA_PLATFORM_QUEEN_FA_HPP} ${CADABRA_PLATFORM_QUEEN_FA_CPP} ${CADABRA_PLATFORM_QUEEN_FA_QRC}
				${CADABRA_PLATFORM_QUEEN_EC_HPP} ${CADABRA_PLATFORM_QUEEN_EC_CPP} ${CADABRA_PLATFORM_QUEEN_EC_QRC}
				${CADABRA_PLATFORM_QUEEN_SD_CPP} ${CADABRA_PLATFORM_QUEEN_SD_HPP} ${CADABRA_PLATFORM_QUEEN_SD_QRC}
				${CADABRA_PLATFORM_QUEEN_HR_CPP} ${CADABRA_PLATFORM_QUEEN_HR_HPP} ${CADABRA_PLATFORM_QUEEN_HR_QRC}
				${CADABRA_PLATFORM_QUEEN_WMS_CPP} ${CADABRA_PLATFORM_QUEEN_WMS_HPP} ${CADABRA_PLATFORM_QUEEN_WMS_QRC}
				${CADABRA_PLATFORM_QUEEN_MENTALGAMI_CPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_HPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_QRC}
				${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_CPP} ${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_HPP} ${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_QRC}
	)
endif ()

if ("Eureka" IN_LIST CADABRA_QUEEN_SKELETON)
	add_queen(
				"Eureka"
				${CADABRA_PLATFORM_QUEEN_CPP} ${CADABRA_PLATFORM_QUEEN_HPP} ${CADABRA_PLATFORM_QUEEN_QRC}
				${CADABRA_QAOS_CPP} ${CADABRA_QAOS_HPP} ${CADABRA_QAOS_QRC}
				${CADABRA_PLATFORM_QUEEN_CORE_CPP} ${CADABRA_PLATFORM_QUEEN_CORE_HPP} ${CADABRA_PLATFORM_QUEEN_CORE_QRC}
				${CADABRA_PLATFORM_QUEEN_REPOSITORY_CPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_HPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_QRC}
				${CADABRA_PLATFORM_QUEEN_CONVERSATION_CPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_HPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_QRC}
				${CADABRA_PLATFORM_QUEEN_ERP_HPP} ${CADABRA_PLATFORM_QUEEN_ERP_CPP} ${CADABRA_PLATFORM_QUEEN_ERP_QRC}
				${CADABRA_PLATFORM_QUEEN_FA_HPP} ${CADABRA_PLATFORM_QUEEN_FA_CPP} ${CADABRA_PLATFORM_QUEEN_FA_QRC}
				${CADABRA_PLATFORM_QUEEN_EC_HPP} ${CADABRA_PLATFORM_QUEEN_EC_CPP} ${CADABRA_PLATFORM_QUEEN_EC_QRC}
				${CADABRA_PLATFORM_QUEEN_SD_CPP} ${CADABRA_PLATFORM_QUEEN_SD_HPP} ${CADABRA_PLATFORM_QUEEN_SD_QRC}
				${CADABRA_PLATFORM_QUEEN_HR_CPP} ${CADABRA_PLATFORM_QUEEN_HR_HPP} ${CADABRA_PLATFORM_QUEEN_HR_QRC}
				${CADABRA_PLATFORM_QUEEN_WMS_CPP} ${CADABRA_PLATFORM_QUEEN_WMS_HPP} ${CADABRA_PLATFORM_QUEEN_WMS_QRC}
				${CADABRA_PLATFORM_QUEEN_MENTALGAMI_CPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_HPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_QRC}
	)
endif ()

if ("Afrodita" IN_LIST CADABRA_QUEEN_SKELETON)
	add_queen(
				"Afrodita"
				${CADABRA_PLATFORM_QUEEN_CPP} ${CADABRA_PLATFORM_QUEEN_HPP} ${CADABRA_PLATFORM_QUEEN_QRC}
				${CADABRA_QAOS_CPP} ${CADABRA_QAOS_HPP} ${CADABRA_QAOS_QRC}
				${CADABRA_PLATFORM_QUEEN_CORE_CPP} ${CADABRA_PLATFORM_QUEEN_CORE_HPP} ${CADABRA_PLATFORM_QUEEN_CORE_QRC}
				${CADABRA_PLATFORM_QUEEN_REPOSITORY_CPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_HPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_QRC}
				${CADABRA_PLATFORM_QUEEN_CONVERSATION_CPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_HPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_QRC}
				${CADABRA_PLATFORM_QUEEN_ERP_HPP} ${CADABRA_PLATFORM_QUEEN_ERP_CPP} ${CADABRA_PLATFORM_QUEEN_ERP_QRC}
				${CADABRA_PLATFORM_QUEEN_FA_HPP} ${CADABRA_PLATFORM_QUEEN_FA_CPP} ${CADABRA_PLATFORM_QUEEN_FA_QRC}
				${CADABRA_PLATFORM_QUEEN_EC_HPP} ${CADABRA_PLATFORM_QUEEN_EC_CPP} ${CADABRA_PLATFORM_QUEEN_EC_QRC}
				${CADABRA_PLATFORM_QUEEN_SD_CPP} ${CADABRA_PLATFORM_QUEEN_SD_HPP} ${CADABRA_PLATFORM_QUEEN_SD_QRC}
				${CADABRA_PLATFORM_QUEEN_HR_CPP} ${CADABRA_PLATFORM_QUEEN_HR_HPP} ${CADABRA_PLATFORM_QUEEN_HR_QRC}
				${CADABRA_PLATFORM_QUEEN_WMS_CPP} ${CADABRA_PLATFORM_QUEEN_WMS_HPP} ${CADABRA_PLATFORM_QUEEN_WMS_QRC}
				${CADABRA_PLATFORM_QUEEN_MENTALGAMI_CPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_HPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_QRC}
				${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_CPP} ${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_HPP} ${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_QRC}
	)
endif ()

if ("Regina" IN_LIST CADABRA_QUEEN_SKELETON)
	add_queen(
				"Regina"
				${CADABRA_PLATFORM_QUEEN_CPP} ${CADABRA_PLATFORM_QUEEN_HPP} ${CADABRA_PLATFORM_QUEEN_QRC}
				${CADABRA_QAOS_CPP} ${CADABRA_QAOS_HPP} ${CADABRA_QAOS_QRC}
				${CADABRA_PLATFORM_QUEEN_CORE_CPP} ${CADABRA_PLATFORM_QUEEN_CORE_HPP} ${CADABRA_PLATFORM_QUEEN_CORE_QRC}
				${CADABRA_PLATFORM_QUEEN_REPOSITORY_CPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_HPP} ${CADABRA_PLATFORM_QUEEN_REPOSITORY_QRC}
				${CADABRA_PLATFORM_QUEEN_CONVERSATION_CPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_HPP} ${CADABRA_PLATFORM_QUEEN_CONVERSATION_QRC}
				${CADABRA_PLATFORM_QUEEN_ERP_HPP} ${CADABRA_PLATFORM_QUEEN_ERP_CPP} ${CADABRA_PLATFORM_QUEEN_ERP_QRC}
				${CADABRA_PLATFORM_QUEEN_FA_HPP} ${CADABRA_PLATFORM_QUEEN_FA_CPP} ${CADABRA_PLATFORM_QUEEN_FA_QRC}
				${CADABRA_PLATFORM_QUEEN_EC_HPP} ${CADABRA_PLATFORM_QUEEN_EC_CPP} ${CADABRA_PLATFORM_QUEEN_EC_QRC}
				${CADABRA_PLATFORM_QUEEN_SD_CPP} ${CADABRA_PLATFORM_QUEEN_SD_HPP} ${CADABRA_PLATFORM_QUEEN_SD_QRC}
				${CADABRA_PLATFORM_QUEEN_HR_CPP} ${CADABRA_PLATFORM_QUEEN_HR_HPP} ${CADABRA_PLATFORM_QUEEN_HR_QRC}
				${CADABRA_PLATFORM_QUEEN_WMS_CPP} ${CADABRA_PLATFORM_QUEEN_WMS_HPP} ${CADABRA_PLATFORM_QUEEN_WMS_QRC}
				${CADABRA_PLATFORM_QUEEN_MENTALGAMI_CPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_HPP} ${CADABRA_PLATFORM_QUEEN_MENTALGAMI_QRC}
				${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_CPP} ${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_HPP} ${CADABRA_PLATFORM_QUEEN_DROBLOZHKO_QRC}
	)
endif ()
